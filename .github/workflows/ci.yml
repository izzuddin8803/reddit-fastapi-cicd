name: CI Pipeline

# When should this workflow run?
on:
  # Run on every push to main branch
  push:
    branches: [ main ]
  # Run on every pull request targeting main
  pull_request:
    branches: [ main ]
  # Allow manual trigger from GitHub UI
  workflow_dispatch:

# Define jobs that run in parallel
jobs:
  test:
    # Run on Ubuntu (most common for Python projects)
    runs-on: ubuntu-latest

    # Matrix strategy: test on multiple Python versions
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    # Steps to execute in this job
    steps:
    # Step 1: Get the code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up Python environment
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Step 3: Cache dependencies for faster builds
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Step 4: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black mypy

    # Step 5: Run code quality checks
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Type check with mypy
      run: |
        mypy . --ignore-missing-imports

    # Step 6: Run tests
    - name: Run tests with pytest
      run: |
        pytest --verbose --tb=short

    # Step 7: Generate test coverage report
    - name: Generate coverage report
      run: |
        pip install pytest-cov
        pytest --cov=. --cov-report=xml --cov-report=html

    # Step 8: Upload coverage to GitHub
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-python-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml